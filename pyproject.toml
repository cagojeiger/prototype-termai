[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["terminal", "ui", "ai", "utils"]

[project]
name = "prototype-termai"
version = "0.1.0"
description = "Terminal AI Assistant with real-time AI-powered assistance using local LLM models"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "cagojeiger", email = "cagojeiger89@gmail.com"},
]
keywords = ["terminal", "ai", "assistant", "tui", "ollama"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Shells",
    "Topic :: Terminals",
]

dependencies = [
    "textual==0.47.1",
    "httpx==0.25.2",
    "pydantic==2.5.2",
    "pydantic-settings==2.1.0",
    "rich==13.7.0",
    "python-dotenv==1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.3",
    "pytest-asyncio==0.23.2",
    "black==23.12.1",
    "ruff==0.1.8",
    "mypy==1.7.1",
    "pre-commit==3.6.0",
]

[project.urls]
Homepage = "https://github.com/cagojeiger/prototype-termai"
Repository = "https://github.com/cagojeiger/prototype-termai"
Issues = "https://github.com/cagojeiger/prototype-termai/issues"

[project.scripts]
termai = "main:main"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
select = ["E", "F", "W", "B", "I", "N", "UP", "C90"]
ignore = ["E501"]  # Line too long
line-length = 88
target-version = "py38"
src = ["terminal", "ui", "ai", "utils"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["terminal", "ui", "ai", "utils"]
omit = ["tests/*", "venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
